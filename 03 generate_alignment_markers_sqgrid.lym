<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math
from string import ascii_uppercase

print("-----------------------------------")

#INFO: To be run after using "generate_alignment_marker_base". Requires existance of certain layers/cells.

# Get layout view, if no layout create one.
lv = pya.LayoutView.current()

# Get cell view, if not existing, then create one.
cv = pya.CellView.active()
layout = cv.layout()

#Select "TOP" Cell
top = layout.cell("TOP")
AM = layout.cell("Alignment Markers")
#Create cell for grid
GRD = layout.create_cell("Grid")
cv.cell = GRD #set to current selection.

# Ensure there is a layer existing
layl = []
layi = []

li = lv.begin_layers()
while not li.at_end():
  node = li.current()
  ly = lv.cellview(node.cellview()) #layout object
  lj = node.layer_index() #layer index
  layl += [ly]
  layi += [lj]
  li.next()


alg_layer_ind = layl[0]
alg_layer = pya.LayerInfo(1,0)
box_layer_ind = layl[1]
box_layer = pya.LayerInfo(2,0)
# Add extra layer for text
txt_layer_ind = layout.insert_layer(pya.LayerInfo().new(3,0,"text"))
txt_layer = pya.LayerInfo(3,0)

# Put layers in list:
lv.add_missing_layers()
lv.layer = txt_layer #select layer

#Writing Layer info

#Create Cell for Alignment markers.
cv.cell = GRD #set to current selection.

# Get TEXT object
lib=pya.Library.library_by_name("Basic")
txt=lib.layout().pcell_declaration("TEXT")

#Specify grid

dx = 1000e3 #um spacing between sets of boxes
dy2 = 150e3 #um spacing between centre of boxes
dy = 1000e3 #um spacing between sets of boxes

#Spacing allowed for 4.5mm chips with gold pads:
#rows = math.ceil(2700e3 / dx)
#cols = math.ceil(2700e3 / dy)

#Spacing allowed for 1cm chips
#rows = math.ceil(10000e3 / dx)
#cols = math.ceil(10000e3 / dy)

#Spacing allowed for 4.5mm chips
rows = math.ceil(4500e3 / dx)
cols = math.ceil(4500e3 / dy)


for row in range(rows):
  for col in range(cols):
    x = (col - 0.5 * (cols-1))*dx
    y = (-row + 0.5 * (rows-1))*dy
    #Create instances of Alignment markers
    inst = pya.CellInstArray(AM.cell_index(), pya.Trans(pya.Point(x,y)))
    GRD.insert(inst)
    
    #    #TEXT
    #text_ij = ascii_uppercase[row] + "%2.2i" % col      #TextLabel
    text_ij = "X%2.2iY%2.2i" % (col,row)      #TextLabel
    param = {
      "layer":txt_layer,
      "text":text_ij,
      "mag": 28
    }
    #Generate defaults for all other parameters
    pv = txt.get_parameters()
    for p in pv:
      if not p.name in param.keys():
        param[p.name] = p.default
        #print(p.name,p.default)
    
    #Make Cell
    pvar = layout.add_pcell_variant(lib, txt.id(), param)
    t = pya.Trans(pya.Trans.R0,x-0.3*dx,y+0.39*dy) #pya.Trans(pya.Trans.R90,0,30e3)
    #instantiate
    pinst = GRD.insert(pya.CellInstArray(pvar, t))
    
    
#Properly fit area
lv.zoom_fit()    
  </text>
</klayout-macro>
